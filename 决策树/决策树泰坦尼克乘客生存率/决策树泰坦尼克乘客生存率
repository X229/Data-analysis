import pandas as pd
from sklearn.feature_extraction import DictVectorizer
from sklearn.tree import DecisionTreeClassifier
import numpy as np
from sklearn.model_selection import cross_val_score
from sklearn import tree
import graphviz

#数据加载
train_data=pd.read_csv("E:\\PythonData\\数据分析学习\\数据分析算法\\train.csv")
test_data=pd.read_csv("E:\\PythonData\\数据分析学习\\数据分析算法\\test.csv")

#数据探索
print(train_data.info())
print('-'*30)
print(train_data.describe())
print('-'*30)
print(train_data.describe(include=['O']))
print('-'*30)
print(train_data.head())
print('-'*30)
print(train_data.tail())

#数据清洗
#使用平均年龄来填充年龄中的nan值
train_data['Age'].fillna(train_data['Age'].mean(),inplace=True)
test_data['Age'].fillna(test_data['Age'].mean(),inplace=True)
#使用船票价格平均值填充票价中nan值
train_data['Fare'].fillna(train_data['Fare'].mean(),inplace=True)
test_data['Fare'].fillna(test_data['Fare'].mean(),inplace=True)
#查看Embarked取值
print(train_data['Embarked'].value_counts())
#使用登陆最多的港口来填充登录港口的nan值
train_data['Embarked'].fillna('S',inplace=True)
test_data['Embarked'].fillna('S',inplace=True)

#特征选择
features=['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']
train_features=train_data[features]
train_labels=train_data['Survived']
test_features=test_data[features]
#Sex、Embarked转换成数字0/1表示,把每种可能性单独作为一列
dvec=DictVectorizer(separator=False)
train_features=dvec.fit_transform(train_features.to_dict(orient='record'))

#决策树模型
#构造ID3决策树
clf=DecisionTreeClassifier(criterion='entropy')
#决策树训练
clf.fit(train_features,train_labels)
#模型预测&评估
test_features=dvec.transform(test_features.to_dict(orient='record'))
#得到决策树准确率
acc_decision_tree=round(clf.score(train_features,train_labels),6)
print(u'score准确率为%.4lf'%acc_decision_tree)
#使用K折交叉验证 统计决策树准确率
print(u'cross_val_score 准确率为 %.4lf'%np.mean(cross_val_score(clf,train_features,train_labels,cv=10)))

#决策树可视化
dot_data=tree.export_graphviz(clf,out_file=None)
graph=graphviz.Source(dot_data)
graph.render("tree")
graph.view('graph')